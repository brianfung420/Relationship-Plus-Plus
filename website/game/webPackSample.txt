var path = require('path');
var webpack = require('webpack');
var BrowserSyncPlugin = require('browser-sync-webpack-plugin');

// Phaser webpack config
var phaserModule = path.join(__dirname, '/node_modules/phaser/');
var phaser = path.join(phaserModule, 'build/custom/phaser-split.js');
var pixi = path.join(phaserModule, 'build/custom/pixi.js');
var p2 = path.join(phaserModule, 'build/custom/p2.js');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var definePlugin = new webpack.DefinePlugin({
    __DEV__: JSON.stringify(JSON.parse(process.env.BUILD_DEV || 'true')),
    'process.env': {
        NODE_ENV: JSON.stringify('dev'),
        REST: JSON.stringify('dev'),
        THEME: JSON.stringify(process.env.THEME),
        assetsPath: JSON.stringify('./game/' + process.env.GAME_NAME + '/assets/' + process.env.THEME),
        GAME_NAME: JSON.stringify(process.env.GAME_NAME),
    },
});

module.exports = {
    entry: {
        // app: [
        //   'babel-polyfill',
        //   path.resolve(__dirname, 'src/main.js')
        // ],
        vendor: ['pixi', 'p2', 'phaser', 'webfontloader'],
        index: './game/' + process.env.GAME_NAME + '/src/page/index.js',
        // landing: './game/' + process.env.GAME_NAME + '/src/page/landing.js'
    },
    devtool: 'eval-source-map',
    output: {
        pathinfo: true,
        path: path.resolve(__dirname, 'dist'),
        publicPath: '/dist/',
        filename: 'js/[name].js', // filename: 'bundle.js'
        chunkFilename: 'js/[id].chunk.js',
    },
    watch: true,
    plugins: [
        definePlugin,
        new webpack.optimize.CommonsChunkPlugin({
            name: 'vendor' /* chunkName= */ ,
            filename: 'js/vendor.bundle.js',
            /* filename= */
        }),
        new HtmlWebpackPlugin({ // 根据模板插入css/js等生成最终HTML
            favicon: './game/' + process.env.GAME_NAME + '/assets/icon/favicon.png', // favicon路径，通过webpack引入同时可以生成hash值
            filename: '../index.html', // 生成的html存放路径，相对于path
            template: './game/' + process.env.GAME_NAME + '/src/template/index.html', // html模板路径
            inject: 'head', // js插入的位置，true/'head'/'body'/false
            hash: false, // 为静态资源生成hash值
            chunks: ['vendor', 'index'], // 需要引入的chunk，不配置就会引入所有页面的资源
            minify: { // 压缩HTML文件
                removeComments: true, // 移除HTML中的注释
                collapseWhitespace: false, // 删除空白符与换行符
            },
        }),
        // new HtmlWebpackPlugin({ //根据模板插入css/js等生成最终HTML
        //  favicon: './game/' + process.env.GAME_NAME + '/assets/icon/favicon.png', //favicon路径，通过webpack引入同时可以生成hash值
        //  filename: '../landing.html', //生成的html存放路径，相对于path
        //  template: './game/' + process.env.GAME_NAME + '/src/template/landing.html', //html模板路径
        //  inject: 'head', //js插入的位置，true/'head'/'body'/false
        //  hash: false, //为静态资源生成hash值
        //  chunks: ['vendor', 'landing'],//需要引入的chunk，不配置就会引入所有页面的资源
        //  minify: { //压缩HTML文件
        //   removeComments: true, //移除HTML中的注释
        //   collapseWhitespace: false //删除空白符与换行符
        //  }
        // }),
        new BrowserSyncPlugin({
            host: process.env.IP || 'localhost',
            port: process.env.PORT || 3000,
            server: {
                baseDir: ['./', './build'],
            },
        }),
    ],
    module: {
        rules: [
            { test: /\.js$/, exclude: /node_modules/, use: ['babel-loader'] },
            { test: /pixi\.js/, use: ['expose-loader?PIXI'] },
            { test: /phaser-split\.js$/, use: ['expose-loader?Phaser'] },
            { test: /p2\.js/, use: ['expose-loader?p2'] },
            { test: /\.(png|jpg|jpeg|gif|svg)$/, use: ['url-loader?limit=30000&name=assets/images/[name].[ext]'] },
        ],
    },
    node: {
        fs: 'empty',
        net: 'empty',
        tls: 'empty',
    },
    resolve: {
        extensions: ['.js', '.jsx', '.css', '.scss'],
        alias: {
            phaser: phaser,
            pixi: pixi,
            p2: p2,
            GameConfig: path.resolve(__dirname, 'game', process.env.GAME_NAME, 'config'),
            Assets: path.resolve(__dirname, 'assets'),
            GameAssets: path.resolve(__dirname, 'game', process.env.GAME_NAME, 'assets', process.env.THEME),
            Src: path.resolve(__dirname, 'src'),
            GameSrc: path.resolve(__dirname, 'game', process.env.GAME_NAME, 'src'),
            JS: path.resolve(__dirname, 'src', 'js'),
            Sprite: path.resolve(__dirname, 'src', 'sprite'),
            Core: path.resolve(__dirname, 'src', 'core'),
        },
    },
};
